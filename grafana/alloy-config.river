logging {
  level  = "info"
  format = "logfmt"
}

discovery.docker "docker_containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "docker_containers" {
  targets = discovery.docker.docker_containers.targets

  // clean up container name
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    replacement   = "$1"
    target_label  = "container"
  }

}

loki.source.docker "container_logs" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.relabel.docker_containers.output // Use relabeled targets
  forward_to    = [loki.process.process_logs.receiver]       // Forward ALL logs to the main processing block
  labels        = { "job" = "docker" }                       // Base job label
  relabel_rules = discovery.relabel.docker_containers.rules  // Apply relabel rules defined above
}

loki.process "process_logs" {
  stage.docker {}

  // Python containers
  stage.match {
    selector = "{container=~\".*(web|celery_worker|celery_beat).*\"}"

    // Python multiline tracebacks
    stage.multiline {
      firstline     = "^level=(INFO|DEBUG|WARNING|ERROR|CRITICAL) ts=\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"
      max_wait_time = "1s"
    }

  stage.template {
    source = "level"
    template = "{{ ToLower .Value }}"
  }

    stage.labels {
       values = {
          log_type = "python",
          level = "",
       }
    }
  }

    // Process Caddy JSON Logs
    stage.match {
      selector = "{container=~\".*caddy.*\"}"

      stage.json {
         expressions = {
           level = "",
           ts = "",
           logger = "",
           msg = "",
           duration = "",
           size = "",
           status = "",
           request_method = "request.method",
           request_uri    = "request.uri",
           request_proto  = "request.proto",
           request_host   = "request.host",
         }
      }

    stage.labels {
       values = {
          level = "",
       }
    }
  }

  // Parse logs from loki and alloy
  stage.match {
    selector = "{ container =~ \".*(loki|alloy).*\" }"
    stage.logfmt {
        mapping = {
          "level" = "",
          "timestape" = "ts",
          "message" = "msg",
        }
    }

    stage.labels {
      values = {
        level = "",
      }
    }
  }


  forward_to = [loki.write.loki_endpoint.receiver]
} // End loki.process process_logs


loki.write "loki_endpoint" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}